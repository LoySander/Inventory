@using Inventory.CoreBusiness;
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
<div class="input-group mb-3">
    <input type="text"
        class="form-control form-control-lg"
        placeholder="Type inventory name here to search"
        @bind-value=inventoryNameToSearch/>
        <button type="button" class="input-group-text btn-success"
        @onclick="@( async()=> {await ViewInventories(); })">Find</button>
</div>
<br/>
 @if(this.DisplayOnSearchResult && inventories != null)
{
    <div>
        <ul style="list-style-type:none">
            @foreach(var inv in inventories)
            {
                <li style="cursor:pointer" @onclick="@(async()=>{await SelectInventory(inv);})"
                    @key="inv.InventoryId">@inv.InventoryName</li>
            }
        </ul>
    </div>
    
} 
@code {
    private string? inventoryNameToSearch;
    private List<Inventory>? inventories;
    [Parameter]
    public EventCallback<List<Inventory>> OnSearchInventories { get; set; }

    [Parameter]
    public EventCallback<Inventory> OnSelectInventory { get; set; }

    [Parameter]
    public bool DisplayOnSearchResult { get; set; } = false;

    private async Task ViewInventories()
    {
        var inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(inventoryNameToSearch ?? string.Empty))?.ToList();

        await OnSearchInventories.InvokeAsync(inventories);
        this.inventories = inventories;
    }
    private async Task SelectInventory(Inventory inv)
    {
        await OnSelectInventory.InvokeAsync(inv);
    }
}
